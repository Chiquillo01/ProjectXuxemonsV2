{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../services/token.service\";\nexport class ChuchesService {\n  constructor(http, tokenService) {\n    this.http = http;\n    this.tokenService = tokenService;\n  }\n  /**\n   * Nombre: getAllChuchesUser\n   * Función: Obtener todas las chuches que tiene un usuario\n   * @returns la url de la api\n   */\n  getAllChuchesUser(userToken) {\n    return this.http.get(`http://127.0.0.1:8000/api/chuchesUser/${userToken}`);\n  }\n  /**\n   * Nombre: getHorario\n   * Función: Obtener todas las chuches que tiene un usuario\n   * @returns la url de la api\n   */\n  activarHorario(userToken) {\n    const authToken = this.tokenService.getToken();\n    const headers = {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    };\n    return this.http.put(`http://127.0.0.1:8000/api/activar/horario/${userToken}`, headers);\n  }\n  /**\n   * Nombre: getHorario\n   * Función: Obtener todas las chuches que tiene un usuario\n   * @returns la url de la api\n   */\n  getHorario(userToken) {\n    return this.http.get(`http://127.0.0.1:8000/api/horario/show/${userToken}`);\n  }\n  /**\n   * Nombre: createChuchesAleatorios\n   * Función: Crear una nueva chuche para el usuario que esta la sesión\n   * @returns la url de la api\n   */\n  createChuchesAleatorios(userToken) {\n    const authToken = this.tokenService.getToken();\n    const headers = {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    };\n    return this.http.post(`http://127.0.0.1:8000/api/chuches/random/${userToken}`, headers);\n  }\n  horario(userToken) {\n    const authToken = this.tokenService.getToken();\n    const headers = {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    };\n    return this.http.post(`http://127.0.0.1:8000/api/chuches/horario/${userToken}`, headers);\n  }\n  chucheUpdate(stack, id) {\n    // Token de sesion //\n    const authToken = this.tokenService.getToken();\n    // Header con el token //\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${authToken}`\n    });\n    // Peticion con headers de actualizacion //\n    return this.http.put(`http://127.0.0.1:8000/api/chuches/${id.id}`, {\n      stack: stack.stack\n    }, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function ChuchesService_Factory(t) {\n    return new (t || ChuchesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TokenService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChuchesService,\n    factory: ChuchesService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","ChuchesService","constructor","http","tokenService","getAllChuchesUser","userToken","get","activarHorario","authToken","getToken","headers","Authorization","put","getHorario","createChuchesAleatorios","post","horario","chucheUpdate","stack","id","_","i0","ɵɵinject","i1","HttpClient","i2","TokenService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Edgar\\Documents\\GitHub\\ProjectXuxemonsV2\\Sprint3\\angularXuxemons\\src\\app\\services\\chuches.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { TokenService } from '../services/token.service';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { ChuchesUser } from '../models/chuches/chuchesUser.model';\r\nimport { Horario } from '../models/horario/horario.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ChuchesService {\r\n  constructor(private http: HttpClient, public tokenService: TokenService) {}\r\n\r\n  /**\r\n   * Nombre: getAllChuchesUser\r\n   * Función: Obtener todas las chuches que tiene un usuario\r\n   * @returns la url de la api\r\n   */\r\n  getAllChuchesUser(userToken: string): Observable<ChuchesUser[]> {\r\n    return this.http.get<ChuchesUser[]>(\r\n      `http://127.0.0.1:8000/api/chuchesUser/${userToken}`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Nombre: getHorario\r\n   * Función: Obtener todas las chuches que tiene un usuario\r\n   * @returns la url de la api\r\n   */\r\n  activarHorario(userToken: string): Observable<Horario[]> {\r\n    const authToken = this.tokenService.getToken();\r\n    const headers = {\r\n      headers: { Authorization: `Bearer ${authToken}` },\r\n    };\r\n\r\n    return this.http.put<Horario[]>(\r\n      `http://127.0.0.1:8000/api/activar/horario/${userToken}`,\r\n      headers\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Nombre: getHorario\r\n   * Función: Obtener todas las chuches que tiene un usuario\r\n   * @returns la url de la api\r\n   */\r\n  getHorario(userToken: string): Observable<Horario[]> {\r\n    return this.http.get<Horario[]>(\r\n      `http://127.0.0.1:8000/api/horario/show/${userToken}`\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Nombre: createChuchesAleatorios\r\n   * Función: Crear una nueva chuche para el usuario que esta la sesión\r\n   * @returns la url de la api\r\n   */\r\n  createChuchesAleatorios(userToken: string): Observable<any> {\r\n    const authToken = this.tokenService.getToken();\r\n    const headers = {\r\n      headers: { Authorization: `Bearer ${authToken}` },\r\n    };\r\n\r\n    return this.http.post<any>(\r\n      `http://127.0.0.1:8000/api/chuches/random/${userToken}`,\r\n      headers\r\n    );\r\n  }\r\n\r\n  horario(userToken: string): Observable<any> {\r\n    const authToken = this.tokenService.getToken();\r\n    const headers = {\r\n      headers: { Authorization: `Bearer ${authToken}` },\r\n    };\r\n\r\n    return this.http.post<any>(\r\n      `http://127.0.0.1:8000/api/chuches/horario/${userToken}`,\r\n      headers\r\n    );\r\n  }\r\n\r\n  chucheUpdate(stack: any, id: any): Observable<any> {\r\n    // Token de sesion //\r\n    const authToken = this.tokenService.getToken();\r\n    // Header con el token //\r\n    const headers = new HttpHeaders({\r\n      Authorization: `Bearer ${authToken}`,\r\n    });\r\n    // Peticion con headers de actualizacion //\r\n    return this.http.put(\r\n      `http://127.0.0.1:8000/api/chuches/${id.id}`,\r\n      { stack: stack.stack },\r\n      {\r\n        headers,\r\n      }\r\n    );\r\n  }\r\n\r\n  // chucheUpdate(stack: number, id: any): Observable<any> {\r\n  //   // Token de sesion //\r\n  //   const authToken = this.tokenService.getToken();\r\n  //   // Header con el token //\r\n  //   const headers = new HttpHeaders({\r\n  //     Authorization: `Bearer ${authToken}`,\r\n  //   });\r\n  //   // Peticion con headers de actualizacion //\r\n  //   return this.http.put(`http://127.0.0.1:8000/api/chuches/${id}`, { stack: stack }, {\r\n  //     headers,\r\n  //   });\r\n  // }\r\n}\r\n"],"mappings":"AAGA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAO9D,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,IAAgB,EAASC,YAA0B;IAAnD,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,YAAY,GAAZA,YAAY;EAAiB;EAE1E;;;;;EAKAC,iBAAiBA,CAACC,SAAiB;IACjC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAClB,yCAAyCD,SAAS,EAAE,CACrD;EACH;EAEA;;;;;EAKAE,cAAcA,CAACF,SAAiB;IAC9B,MAAMG,SAAS,GAAG,IAAI,CAACL,YAAY,CAACM,QAAQ,EAAE;IAC9C,MAAMC,OAAO,GAAG;MACdA,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUH,SAAS;MAAE;KAChD;IAED,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAClB,6CAA6CP,SAAS,EAAE,EACxDK,OAAO,CACR;EACH;EAEA;;;;;EAKAG,UAAUA,CAACR,SAAiB;IAC1B,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAClB,0CAA0CD,SAAS,EAAE,CACtD;EACH;EAEA;;;;;EAKAS,uBAAuBA,CAACT,SAAiB;IACvC,MAAMG,SAAS,GAAG,IAAI,CAACL,YAAY,CAACM,QAAQ,EAAE;IAC9C,MAAMC,OAAO,GAAG;MACdA,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUH,SAAS;MAAE;KAChD;IAED,OAAO,IAAI,CAACN,IAAI,CAACa,IAAI,CACnB,4CAA4CV,SAAS,EAAE,EACvDK,OAAO,CACR;EACH;EAEAM,OAAOA,CAACX,SAAiB;IACvB,MAAMG,SAAS,GAAG,IAAI,CAACL,YAAY,CAACM,QAAQ,EAAE;IAC9C,MAAMC,OAAO,GAAG;MACdA,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUH,SAAS;MAAE;KAChD;IAED,OAAO,IAAI,CAACN,IAAI,CAACa,IAAI,CACnB,6CAA6CV,SAAS,EAAE,EACxDK,OAAO,CACR;EACH;EAEAO,YAAYA,CAACC,KAAU,EAAEC,EAAO;IAC9B;IACA,MAAMX,SAAS,GAAG,IAAI,CAACL,YAAY,CAACM,QAAQ,EAAE;IAC9C;IACA,MAAMC,OAAO,GAAG,IAAIX,WAAW,CAAC;MAC9BY,aAAa,EAAE,UAAUH,SAAS;KACnC,CAAC;IACF;IACA,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAClB,qCAAqCO,EAAE,CAACA,EAAE,EAAE,EAC5C;MAAED,KAAK,EAAEA,KAAK,CAACA;IAAK,CAAE,EACtB;MACER;KACD,CACF;EACH;EAAC,QAAAU,CAAA,G;qBAtFUpB,cAAc,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAd3B,cAAc;IAAA4B,OAAA,EAAd5B,cAAc,CAAA6B,IAAA;IAAAC,UAAA,EAFb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}