{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n// Imports necesarios //\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nexport let LoginComponent = class LoginComponent {\n  constructor(usersService, tokenService, router) {\n    this.usersService = usersService;\n    this.tokenService = tokenService;\n    this.router = router;\n    // Valores que espera y validadores de estos que espera del formulario //\n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required])\n    });\n  }\n  ngOnInit() {}\n  /**\n   * Función: Login\n   * Explicación: Manda los datos recogidos por el\n   * formulario al servicio del usuario\n   */\n  Login() {\n    this.usersService.Login(this.loginForm.value).subscribe({\n      next: data => {\n        this.router.navigate(['/home/home']);\n        const token = data.access_token;\n        console.log(data);\n        this.tokenService.setToken(data);\n      },\n      error: error => {\n        alert('Correo electrónico o contraseña erroneos');\n        throw new Error(error);\n      }\n    });\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);","map":{"version":3,"names":["Component","FormGroup","FormControl","Validators","LoginComponent","constructor","usersService","tokenService","router","loginForm","email","required","password","ngOnInit","Login","value","subscribe","next","data","navigate","token","access_token","console","log","setToken","error","alert","Error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Edgar\\Documents\\GitHub\\ProjectXuxemonsV2\\Sprint3\\angularXuxemons\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n// Imports necesarios //\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { UsersService } from '../services/users/users.service';\r\nimport { TokenService } from '../services/token.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  // Valores que espera y validadores de estos que espera del formulario //\r\n  loginForm: FormGroup = new FormGroup({\r\n    email: new FormControl('', [Validators.required]),\r\n    password: new FormControl('', [Validators.required]),\r\n  });\r\n\r\n  constructor(\r\n    public usersService: UsersService,\r\n    public tokenService: TokenService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  /**\r\n   * Función: Login\r\n   * Explicación: Manda los datos recogidos por el \r\n   * formulario al servicio del usuario\r\n   */\r\n  Login() {\r\n    this.usersService.Login(this.loginForm.value).subscribe({\r\n      next: (data: any) => {\r\n        this.router.navigate(['/home/home']);\r\n        const token = data.access_token;\r\n        console.log(data);\r\n        this.tokenService.setToken(data);\r\n      },\r\n      error: (error) => {\r\n        alert('Correo electrónico o contraseña erroneos');\r\n        throw new Error(error);\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD;AACA,SAASC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAAQ,gBAAgB;AAU5D,WAAMC,cAAc,GAApB,MAAMA,cAAc;EAOzBC,YACSC,YAA0B,EAC1BC,YAA0B,EACzBC,MAAc;IAFf,KAAAF,YAAY,GAAZA,YAAY;IACZ,KAAAC,YAAY,GAAZA,YAAY;IACX,KAAAC,MAAM,GAANA,MAAM;IAThB;IACA,KAAAC,SAAS,GAAc,IAAIR,SAAS,CAAC;MACnCS,KAAK,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACQ,QAAQ,CAAC,CAAC;MACjDC,QAAQ,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACQ,QAAQ,CAAC;KACpD,CAAC;EAMC;EAEHE,QAAQA,CAAA,GAAU;EAElB;;;;;EAKAC,KAAKA,CAAA;IACH,IAAI,CAACR,YAAY,CAACQ,KAAK,CAAC,IAAI,CAACL,SAAS,CAACM,KAAK,CAAC,CAACC,SAAS,CAAC;MACtDC,IAAI,EAAGC,IAAS,IAAI;QAClB,IAAI,CAACV,MAAM,CAACW,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;QACpC,MAAMC,KAAK,GAAGF,IAAI,CAACG,YAAY;QAC/BC,OAAO,CAACC,GAAG,CAACL,IAAI,CAAC;QACjB,IAAI,CAACX,YAAY,CAACiB,QAAQ,CAACN,IAAI,CAAC;MAClC,CAAC;MACDO,KAAK,EAAGA,KAAK,IAAI;QACfC,KAAK,CAAC,0CAA0C,CAAC;QACjD,MAAM,IAAIC,KAAK,CAACF,KAAK,CAAC;MACxB;KACD,CAAC;EACJ;CACD;AAlCYrB,cAAc,GAAAwB,UAAA,EAL1B5B,SAAS,CAAC;EACT6B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACW3B,cAAc,CAkC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}