{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\n// Imports necesarios //\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nexport let RegistroComponent = class RegistroComponent {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.router = router;\n    // Valores que espera y validadores de estos que espera del formulario //\n    this.registroForm = new FormGroup({\n      nick: new FormControl('', [Validators.required]),\n      email: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required]),\n      password_confirmation: new FormControl('', [Validators.required]),\n      rol: new FormControl(false)\n    });\n  }\n  ngOnInit() {}\n  /**\n   * Función: Registrar\n   * Explicación: Comprueba que sean la misma contraseña,\n   * envia lis datos al servicio del usuario y\n   * muestra alertas del tipo de resultado que ha tenido el servicio\n   */\n  Registrar() {\n    if (this.registroForm.value.contraseña === this.registroForm.value.RepetirContraseña) {\n      this.userService.Registrar(this.registroForm.value).subscribe({\n        next: data => {\n          this.router.navigate(['/login']);\n          alert('Usuario registrado correctamente.');\n        },\n        error: error => {\n          alert('No se pudo registrar el usuario correctamente');\n          throw new Error(error);\n        }\n      });\n    } else {\n      alert(\"Las contraseñas no coinciden\");\n    }\n  }\n};\nRegistroComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './registro.component.html',\n  styleUrls: ['./registro.component.css']\n})], RegistroComponent);","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","RegistroComponent","constructor","userService","router","registroForm","nick","required","email","password","password_confirmation","rol","ngOnInit","Registrar","value","contraseña","RepetirContraseña","subscribe","next","data","navigate","alert","error","Error","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Edgar\\Documents\\GitHub\\ProjectXuxemonsV2\\Sprint3\\angularXuxemons\\src\\app\\registro\\registro.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n// Imports necesarios //\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { UsersService } from '../services/users.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './registro.component.html',\r\n  styleUrls: ['./registro.component.css']\r\n})\r\nexport class RegistroComponent implements OnInit {\r\n  // Valores que espera y validadores de estos que espera del formulario //\r\n  registroForm: FormGroup = new FormGroup({\r\n    nick: new FormControl('', [Validators.required]),\r\n    email: new FormControl('', [Validators.required]),\r\n    password: new FormControl('', [Validators.required]),\r\n    password_confirmation: new FormControl('', [Validators.required]),\r\n    rol: new FormControl(false)\r\n  });\r\n\r\n  constructor(public userService: UsersService, private router: Router) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  /**\r\n   * Función: Registrar\r\n   * Explicación: Comprueba que sean la misma contraseña, \r\n   * envia lis datos al servicio del usuario y\r\n   * muestra alertas del tipo de resultado que ha tenido el servicio\r\n   */\r\n  Registrar() {\r\n    if (this.registroForm.value.contraseña === this.registroForm.value.RepetirContraseña) {\r\n      this.userService.Registrar(this.registroForm.value).subscribe({\r\n        next: (data) => {\r\n          this.router.navigate(['/login']);\r\n          alert('Usuario registrado correctamente.');\r\n        },\r\n        error: (error) => {\r\n          alert('No se pudo registrar el usuario correctamente');\r\n          throw new Error(error);\r\n        }\r\n      });\r\n    } else {\r\n      alert(\"Las contraseñas no coinciden\");\r\n    }\r\n  }\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD;AACA,SAASC,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;AAS5D,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAU5BC,YAAmBC,WAAyB,EAAUC,MAAc;IAAjD,KAAAD,WAAW,GAAXA,WAAW;IAAwB,KAAAC,MAAM,GAANA,MAAM;IAT5D;IACA,KAAAC,YAAY,GAAc,IAAIN,SAAS,CAAC;MACtCO,IAAI,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,CAAC,CAAC;MAChDC,KAAK,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,CAAC,CAAC;MACjDE,QAAQ,EAAE,IAAIX,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,CAAC,CAAC;MACpDG,qBAAqB,EAAE,IAAIZ,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,CAAC,CAAC;MACjEI,GAAG,EAAE,IAAIb,WAAW,CAAC,KAAK;KAC3B,CAAC;EAEsE;EAExEc,QAAQA,CAAA,GAAW;EAEnB;;;;;;EAMAC,SAASA,CAAA;IACP,IAAI,IAAI,CAACR,YAAY,CAACS,KAAK,CAACC,UAAU,KAAK,IAAI,CAACV,YAAY,CAACS,KAAK,CAACE,iBAAiB,EAAE;MACpF,IAAI,CAACb,WAAW,CAACU,SAAS,CAAC,IAAI,CAACR,YAAY,CAACS,KAAK,CAAC,CAACG,SAAS,CAAC;QAC5DC,IAAI,EAAGC,IAAI,IAAI;UACb,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UAChCC,KAAK,CAAC,mCAAmC,CAAC;QAC5C,CAAC;QACDC,KAAK,EAAGA,KAAK,IAAI;UACfD,KAAK,CAAC,+CAA+C,CAAC;UACtD,MAAM,IAAIE,KAAK,CAACD,KAAK,CAAC;QACxB;OACD,CAAC;KACH,MAAM;MACLD,KAAK,CAAC,8BAA8B,CAAC;;EAEzC;CACD;AApCYpB,iBAAiB,GAAAuB,UAAA,EAL7B3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,C,EACW1B,iBAAiB,CAoC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}